You can execute different types of SQL statements using a JDBC driver. Based on the type of work that a SQL statement
performs in a DBMS, it can be categorized as follows:
    • A Data Definition Language (DDL) Statement: Examples of DDL statements are CREATE
    TABLE, ALTER TABLE, etc.
    • A Data Manipulation Language (DML) Statement: Examples of DML statements are SELECT,
    INSERT, UPDATE, DELETE, etc.
    • A Data Control Language (DCL) Statement: Examples of DCL statements are GRANT
    and REVOKE.
    • A Transaction Control Language (TCL) Statement: Example of TCL statements are COMMIT,
    ROLLBACK, SAVEPOINT, etc.

You can execute DDL, DML, and DCL statements using different types of JDBC statement objects. An instance
of the Statement interface represents a SQL statement in a Java program. You can execute TCL statements using the
methods of a Connection object.

Java uses three different interfaces to represent SQL statements in different formats:
    • interface Statement
        • interface PreparedStatement
            • interface CallableStatement

The PreparedStatement interface inherits from the Statement interface and the CallableStatement interface
inherits from the PreparedStatement interface. You need not worry about the implementation details of these
interfaces at all. The vendor of the JDBC driver will supply the implementation classes for these interfaces. You just
need to know which method to call on a Connection object to get a specific type of the Statement object.

If you have a SQL statement in the form of a string, you can use a Statement object to execute it. The SQL
statement may or may not return a result set. Typically, a SELECT statement returns a result set with zero or more
records. The SQL statements in the string format are compiled each time they are executed.

You can use a PreparedStatement, if you want to precompile a SQL statement once and execute it multiple times.
It lets you specify a SQL statement in the form of a string that uses placeholders. You need to supply the values of the
placeholders before you execute the statement.


You can use a Statement to execute any kind of SQL statement, provided the SQL statement is supported by the
JDBC driver and the DBMS. Typically, you use one of its three methods called execute(), executeUpdate(), and
executeQuery() to execute a SQL statement.
    • boolean execute(String SQL) throws SQLException
    • int executeUpdate(String SQL) throws SQLException
        executeLargeUpdate()
    • ResultSet executeQuery(String SQL) throws SQLException


The execute() method in the Statement interface is a general-purpose method that you can use to execute any
types of SQL statements. Typically, it is used to execute a SQL statement that does not return a result set, such as a
DDL statement like CREATE TABLE. The returned value from the execute() method indicates the status of the returned
result set. If the first result is a ResultSet object, it returns true. It returns false if the first result is an update count or
no result is returned from the DBMS.

The executeUpdate() method is used to execute a SQL statement that updates the data in the database such as
INSERT, UPDATE and DELETE statements. It returns the number of rows affected in the database by the execution of the
statement. You may use this method to execute other kinds of SQL statements, such as a CREATE TABLE statement,
which do not return anything. The method returns zero when the SQL statement does not return anything. You should
not use this method to execute a SELECT statement.

Java 8 has added a executeLargeUpdate() method that works the same as the executeUpdate() method,
except that it returns a long instead of an int. Use this method when you expect the update count to exceed
Integer.MAX_VALUE.

The executeQuery() method is especially designed to execute a SQL statement that produces one and only one
result set. It is best suited for executing a SELECT statement. Although you can execute a stored procedure, which
produces a result set, using this method of the Statement interface, you should instead use the specially designed
CallableStatement interface’s execute() method to execute a stored procedure.

When you execute a query (a SELECT statement) in a database, it returns the matching records in the form of a
result set. You can consider a result set as a data arranged in rows and columns. The SELECT statement determines
the number of rows and columns that is contained in the result set. The Statement (or PreparedStatement or
CallableStatement) object returns the result of a query as a ResultSet object. I am using two phrases here: “result
set” and “ResultSet.” By “result set,” I mean the data in the form of rows and columns, and by “ResultSet,” I mean
an instance of a class that implements the ResultSet interface that lets you access and manipulate that data.
A ResultSet object also contains information about the properties of the columns in the result set such as the data
types of the columns, names of the columns, etc.

A ResultSet object maintains a cursor, which points to a row in the result set. It works similar to a cursor object
in database programs. You can scroll the cursor to a specific row in the result set to access or manipulate the column
values for that row. The cursor can point to only one row at a time. The row to which it points at a particular point in
time is called the current row.
By default (SQLite supports only Scroll Forward-Only and Concurrency Read-Only.), a ResultSet is
scrollable only in the forward direction and Read-Only. By default cursor is closed when commit.
SQLite supports only Scroll Forward-Only and Concurrency Read-Only and CLOSE CURSORS AT COMMIT.